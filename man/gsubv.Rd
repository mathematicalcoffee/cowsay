% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/gsubv.r
\name{gsubv}
\alias{gsubv}
\title{Performs multiple sequential replacements}
\usage{
gsubv(patterns, replacements, x, ...)
}
\arguments{
\item{patterns}{{character vector} the patterns to replace.
Regex is permitted. If shorter than `replacements`, it is recycled
to that length.}

\item{replacements}{{character vector} the replacements. Should be the
same length as `patterns`. If not, it is recycled to that length.}

\item{x}{{character vector} string to perform replacements on.
If it has more than one elements, the entire set of substitutions will be
performed on each element.}

\item{...}{passed through to `gsub` (e.g. `ignore.case`, `perl`)}
}
\value{
character vector of the same length as `x` where all occurences of
`patterns` have been replaced by the corresponding element of `replacements`,
sequentially.
}
\description{
This modifies `x` replacing all occurences of `patterns` with `replacements`,
working sequentially through the patterns and replacments (matching them up with
each other).
}
\details{
Note that replacements are done sequentially, so that it is possible that
changing the order of the patterns/replacements will change the output (see
examples).
}
\examples{
gsubv('foo', 'bar', 'foobar') # barbar

# Multiple patterns/replacements
gsubv(c('one', 'two'), c('un', 'deux'), 'one two three!')
# [1] "un deux three!"

# Multiple replacements are done sequentially; be careful about the order
gsubv(c('cone', 'one'), c('icecream waffle', 'a single'), 'one cone of cold')
# [1] "a single icecream waffle of cold"
gsubv(c('cone', 'one')[2:1], c('icecream waffle', 'a single')[2:1], 'one cone of cold')
# [1] "a single ca single of cold"

# Replacements can be made on previous replacements
gsubv(c('cat', 'dog'), c('ruler of dogs', 'puppy-wuppy'), 'A cat and a dog')
# [1] "A ruler of puppy-wuppys and a puppy-wuppy"
gsubv(c('cat', 'dog')[2:1], c('ruler of dogs', 'puppy-wuppy')[2:1], 'A cat and a dog')
# [1] "A ruler of dogs and a puppy-wuppy"

# You can use regex of course, as usual.
gsubv(c('o', '([bc])[ae]'), c('a', '\\\\1o'), 'raining bears and cats and dogs')
# [1] "raining boars and cots and dags"
}
\seealso{
\code{\link{gsub}}
}

